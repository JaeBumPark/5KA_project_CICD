pipeline {
  agent any
  tools {
    maven 'my_maven'
  }

  parameters {
    string(name: 'gitlabName', defaultValue: 'root')
    string(name: 'gitlabEmail', defaultValue: 'root@5ka.io')
    string(name: 'gitlabWebaddress', defaultValue: '')
    string(name: 'githelmaddress', defaultValue: '', description: 'git helm repository') //defaultvalue 변경 예정
    string(name: 'githelmshortddress', defaultValue: '', description: 'git helm repository')
    string(name: 'gitlabCredential', defaultValue: 'git_cre', description: 'git credentials')
    string(name: 'ecrrepositoryCredential', defaultValue: 'nexus_cre')
    string(name: 'ecrrepository', defaultValue: 'https://963897741994.dkr.ecr.ap-northeast-2.amazonaws.com')
    string(name: 'namespace', defaultValue: '')
    
  }
  stages {
    stage('Checkout Gitlab') {
      steps {
        checkout([$class: 'GitSCM', branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[credentialsId:  "${params.gitlabCredential}", url: "${params.gitlabWebaddress}"]]])
        echo "gitlabName: ${params.gitlabName}"
        echo "gitlabEmail: ${params.gitlabEmail}"
        echo "gitlabWebaddress: ${params.gitlabWebaddress}"
        echo "githelmaddress: ${params.githelmaddress}"
        echo "githelmshortddress: ${params.githelmshortddress}"
        echo "gitlabCredential: ${params.gitlabCredential}"
        echo "ecrrepositoryCredential: ${params.ecrrepositoryCredential}"
        echo "ecrrepository: ${params.ecrrepository}"
        echo "namespace: ${params.namespace}"
      }
    }
    stage('Dokcer pod deploy') {
      steps {
        podTemplate(yaml: '''
          apiVersion: v1
          kind: Pod
          spec:
            serviceAccountName: jenkins-admin
            volumes:
            - name: docker-socket
              emptyDir: {}
            containers:
            - name: docker
              image: docker
              readinessProbe:
                exec:
                  command: [sh, -c, "ls -S /var/run/docker.sock"]
              command:
              - sleep
              args:
              - 99d
              volumeMounts:
              - name: docker-socket
                mountPath: /var/run
            - name: docker-daemon
              image: docker:dind
              securityContext:
                privileged: true
              volumeMounts:
              - name: docker-socket
                mountPath: /var/run
            - name: kubectl
              image: bitnami/kubectl:1.26.0
              command: 
              - sleep
              args: 
              - 99d
            - name: maven
              image: maven:3.8.1-jdk-8
              command:
              - sleep
              args:
              - 99d
        ''') {
          node(POD_LABEL) {


            container('docker') {
              script {
                stage('Clone Repository') {
                  checkout scm
                }
              }
            }
            container('maven'){
              script{
                stage('Maven Build') {
                sh 'mvn clean install'
                 }
      
              }        
             } 
            

  
                stage('Push Docker image') {
                  def appname = params.namespace
                  def app = docker.build("nexus.ihp001.dev/${appname}") // Docker 이미지를 빌드합니다.
                  docker.withRegistry('https://nexus.ihp001.dev', 'nexus_cre') {
                      app.push("${env.BUILD_NUMBER}") // 이미지를 특정 태그로 푸시합니다.
                      app.push("latest") // 이미지를 최신 버전으로 푸시합니다.
                    }
                  }
                }
              }
            }
          }
        }
      }

    stage('5ka Manifest Repository change') {
        steps {
            git credentialsId: "${params.gitlabCredential}",
                url: "${params.githelmaddress}",
                branch: 'main'
        }
        post {
                failure {
                echo '5ka Repository change failure !'
                }
                success {
                echo '5ka Repository change success !'
                }
        }
    }

    stage('manifest Update') {
        steps {
            withCredentials([usernamePassword(credentialsId: "${params.gitlabCredential}", passwordVariable: 'password', usernameVariable: 'username')]) {
            sh "git init"
            sh "git checkout main"
            sh "sed -i 's@version:.*@version: ${env.BUILD_NUMBER}@g' ./values.yaml"
            sh "sed -i 's@repository:.*@repository: nexus.ihp001.dev@g' ./values.yaml"
            sh "git add ."
            sh "git config --global user.email ${params.gitlabName}"
            sh "git config --global user.name ${params.gitlabEmail}"
            sh "git commit -m '[UPDATE] 5ka ${GIT_COMMIT} image versioning'"
            sh "git remote set-url origin https://${username}:${password}@${params.githelmshortddress}"
            sh "git push -f origin main"
            }
        }
    }    
  }
}
